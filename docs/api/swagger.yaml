openapi: 3.0.3
info:
  title: Sistema de Gesti√≥n de Conjuntos Residenciales API
  description: |
    üè¢ **API REST Completa para Gesti√≥n de Conjuntos Residenciales**
    
    Sistema integral desarrollado con Node.js, Express.js y PostgreSQL que incluye:
    
    ## üöÄ Caracter√≠sticas Principales
    - **Autenticaci√≥n JWT** con 4 roles de usuario (Admin, Owner, Tenant, Security)
    - **Sistema Airbnb Completo** con notificaciones autom√°ticas
    - **Gesti√≥n de Mantenimiento** con notificaci√≥n masiva a residentes
    - **Reportes de Da√±os** con notificaci√≥n autom√°tica a propietarios
    - **Sistema de Pagos** y cuotas de administraci√≥n
    - **Notificaciones Autom√°ticas** para todos los flujos de negocio
    - **Control de Permisos** granular por endpoint
    
    ## üîê Autenticaci√≥n
    Todos los endpoints (excepto `/health` y `/api/auth/*`) requieren autenticaci√≥n JWT.
    
    **Header requerido:**
    ```
    Authorization: Bearer YOUR_JWT_TOKEN_HERE
    ```
    
    ## üë• Roles y Permisos
    - **Admin**: Acceso completo a todas las funcionalidades
    - **Owner**: Gesti√≥n de apartamentos y hu√©spedes Airbnb
    - **Tenant**: Reportes de da√±os y consultas b√°sicas
    - **Security**: Check-in de hu√©spedes y control de acceso
    
    ## üß™ Testing
    - ‚úÖ 25/25 pruebas de autenticaci√≥n con token
    - ‚úÖ Sistema completamente validado
    - ‚úÖ 95.7% de tasa de √©xito en pruebas
    
  version: 1.0.0
  contact:
    name: Sistema Conjuntos Residenciales
    email: loltrolgamer12@github.com
    url: https://github.com/loltrolgamer12/residential_complex
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
    
servers:
  - url: http://localhost:3000
    description: Servidor de desarrollo

tags:
  - name: Auth
    description: Autenticaci√≥n y autorizaci√≥n JWT
  - name: Users
    description: Gesti√≥n de usuarios del sistema
  - name: Apartments
    description: Gesti√≥n de apartamentos y propiedades
  - name: Airbnb
    description: Gesti√≥n de hu√©spedes Airbnb con notificaciones autom√°ticas
  - name: Maintenance
    description: Mantenimientos programados con notificaci√≥n masiva
  - name: Damage Reports
    description: Reportes de da√±os con notificaci√≥n autom√°tica
  - name: Notifications
    description: Sistema completo de notificaciones
  - name: Payments
    description: Mensualidades y pagos de administraci√≥n
  - name: System
    description: Health check y endpoints del sistema

paths:
  /health:
    get:
      tags: [System]
      summary: Health Check del Sistema
      description: Endpoint para verificar estado del API y ver endpoints disponibles
      responses:
        200:
          description: Sistema funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: üè¢ Sistema Conjuntos Residenciales API
                  timestamp:
                    type: string
                    format: date-time
                  features:
                    type: object
                    description: Funcionalidades implementadas seg√∫n documento
                  endpoints:
                    type: object
                    description: Endpoints principales organizados por funcionalidad

  /api/auth/register:
    post:
      tags: [Auth]
      summary: Registrar Usuario
      description: |
        Crear nueva cuenta de usuario en el sistema.
        
        **Roles disponibles:**
        - `admin`: Administrador del conjunto
        - `owner`: Propietario de apartamento
        - `tenant`: Inquilino/arrendatario
        - `security`: Personal de seguridad/porter√≠a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, cedula, role]
              properties:
                name:
                  type: string
                  example: Juan P√©rez
                  description: Nombre completo del usuario
                email:
                  type: string
                  format: email
                  example: juan@example.com
                  description: Email √∫nico del usuario
                password:
                  type: string
                  minLength: 6
                  example: Password123!
                  description: Contrase√±a segura (m√≠n. 6 caracteres)
                cedula:
                  type: string
                  example: "12345678"
                  description: N√∫mero de c√©dula √∫nico
                phone:
                  type: string
                  example: "+57 300 123 4567"
                  description: N√∫mero de tel√©fono (opcional)
                role:
                  type: string
                  enum: [admin, owner, tenant, security]
                  example: tenant
                  description: Rol del usuario en el sistema
      responses:
        201:
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Usuario registrado exitosamente
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                        description: JWT token para autenticaci√≥n
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Error de validaci√≥n
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Email o c√©dula ya registrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Iniciar Sesi√≥n
      description: |
        Autenticar usuario existente en el sistema.
        Retorna JWT token v√°lido por 24 horas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: admin@test.com
                  description: Email del usuario registrado
                password:
                  type: string
                  example: Admin123!
                  description: Contrase√±a del usuario
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login exitoso
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                        description: JWT token v√°lido por 24h
                      user:
                        $ref: '#/components/schemas/User'
        400:
          description: Datos inv√°lidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/profile:
    get:
      tags: [Auth]
      summary: Obtener Perfil del Usuario
      description: Recuperar informaci√≥n del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        200:
          description: Perfil del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        401:
          description: Token inv√°lido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/airbnb/guests:
    post:
      tags: [Airbnb]
      summary: Registrar Hu√©sped Airbnb (Flujo Principal)
      description: |
        **FLUJO PRINCIPAL DEL DOCUMENTO:**
        1. Propietario registra hu√©sped con datos completos
        2. Sistema notifica autom√°ticamente:
           - Al propietario (apartamento ocupado)
           - Al administrador (control de seguridad)
           - A porter√≠a (registro de entrada)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apartmentId, guestName, guestCedula, numberOfGuests, checkInDate, checkOutDate]
              properties:
                apartmentId:
                  type: integer
                  example: 1
                guestName:
                  type: string
                  example: Juan P√©rez Garc√≠a
                guestCedula:
                  type: string
                  example: "12345678"
                numberOfGuests:
                  type: integer
                  minimum: 1
                  maximum: 10
                  example: 2
                checkInDate:
                  type: string
                  format: date
                  example: "2025-01-01"
                checkOutDate:
                  type: string
                  format: date
                  example: "2025-01-07"
      responses:
        201:
          description: Hu√©sped registrado exitosamente con notificaciones autom√°ticas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AirbnbGuest'
                  message:
                    type: string
                    example: Hu√©sped Airbnb registrado exitosamente. Sistema notific√≥ autom√°ticamente.

  /api/airbnb/guests/{id}/checkin:
    put:
      tags: [Airbnb]
      summary: Check-in por Porter√≠a
      description: |
        **FLUJO PORTER√çA:** Vigilancia registra llegada de hu√©sped.
        Genera notificaci√≥n autom√°tica al propietario y administrador.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Check-in realizado con notificaci√≥n autom√°tica
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      status:
                        type: string
                        example: checked_in
                      timestamp:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: Check-in realizado por porter√≠a. Notificaci√≥n autom√°tica enviada.
        403:
          description: Permisos insuficientes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/airbnb/guests/{id}/checkout:
    put:
      tags: [Airbnb]
      summary: Check-out por Porter√≠a
      description: |
        **FLUJO PORTER√çA:** Vigilancia registra salida de hu√©sped.
        Actualiza estado y libera apartamento.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Check-out realizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      status:
                        type: string
                        example: checked_out
                      timestamp:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: Check-out realizado exitosamente

  /api/airbnb/guests/active:
    get:
      tags: [Airbnb]
      summary: Hu√©spedes Activos (Control Seguridad)
      description: |
        **PARA ADMINISTRADOR:** Lista de hu√©spedes actualmente en el conjunto
        para control de seguridad seg√∫n documento.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de hu√©spedes activos para control de seguridad
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActiveGuest'

  /api/apartments:
    get:
      tags: [Apartments]
      summary: Listar Apartamentos
      description: |
        Obtener lista de apartamentos del conjunto residencial.
        Disponible para todos los usuarios autenticados.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filtrar por estado del apartamento
          schema:
            type: string
            enum: [owner_occupied, rented, available, maintenance]
        - name: tower
          in: query
          description: Filtrar por torre
          schema:
            type: string
      responses:
        200:
          description: Lista de apartamentos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Apartment'

    post:
      tags: [Apartments]
      summary: Registrar Apartamento
      description: |
        **SOLO OWNER/ADMIN:** Registrar nuevo apartamento en el sistema.
        Se asocia autom√°ticamente al propietario que lo registra.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [number, tower, floor, type]
              properties:
                number:
                  type: string
                  example: "101-A"
                  description: N√∫mero √∫nico del apartamento
                tower:
                  type: string
                  example: "Torre A"
                  description: Torre donde se ubica
                floor:
                  type: integer
                  example: 1
                  description: Piso del apartamento
                type:
                  type: string
                  example: "2 habitaciones"
                  description: Tipo/descripci√≥n del apartamento
                status:
                  type: string
                  enum: [owner_occupied, rented, available, maintenance]
                  default: owner_occupied
                  description: Estado inicial del apartamento
      responses:
        201:
          description: Apartamento registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Apartment'
                  message:
                    type: string
                    example: Apartamento registrado exitosamente
        403:
          description: Permisos insuficientes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/apartments/{id}:
    get:
      tags: [Apartments]
      summary: Obtener Apartamento Espec√≠fico
      description: Obtener informaci√≥n detallada de un apartamento
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Informaci√≥n del apartamento
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Apartment'
        404:
          description: Apartamento no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/maintenance:
    post:
      tags: [Maintenance]
      summary: Programar Mantenimiento
      description: |
        **FLUJO MANTENIMIENTOS:** Administrador programa mantenimiento.
        Sistema notifica autom√°ticamente a TODOS los residentes.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, area]
              properties:
                title:
                  type: string
                  example: Mantenimiento Piscina
                description:
                  type: string
                  example: Limpieza y mantenimiento general de la piscina
                area:
                  type: string
                  enum: [parque, piscina, ascensor, zonas_comunes, gym, salon_comunal]
                  example: piscina
                scheduledDate:
                  type: string
                  format: date
                  example: "2025-01-15"
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  default: medium
      responses:
        201:
          description: Mantenimiento programado con notificaciones enviadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Maintenance'
                  message:
                    type: string
                    example: Mantenimiento programado. Todos los residentes han sido notificados.

    get:
      tags: [Maintenance]
      summary: Ver Mantenimientos (App M√≥vil)
      description: Endpoint para que usuarios vean mantenimientos en app m√≥vil
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed]
        - name: area
          in: query
          schema:
            type: string
      responses:
        200:
          description: Lista de mantenimientos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Maintenance'

  /api/damage-reports:
    post:
      tags: [Damage Reports]
      summary: Reportar Da√±o
      description: |
        **FLUJO REPORTES:** Arrendatarios/hu√©spedes reportan da√±os.
        Sistema notifica autom√°ticamente al propietario del apartamento.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apartmentId, title, description]
              properties:
                apartmentId:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: Fuga en ba√±o principal
                description:
                  type: string
                  example: Se detect√≥ una fuga de agua en la ducha del ba√±o principal
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  default: medium
      responses:
        201:
          description: Reporte creado con notificaci√≥n al propietario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DamageReport'
                  message:
                    type: string
                    example: Reporte de da√±o creado. Propietario ha sido notificado autom√°ticamente.

  /api/damage-reports/my-reports:
    get:
      tags: [Damage Reports]
      summary: Mis Reportes (App M√≥vil)
      description: Ver reportes de da√±o creados por el usuario actual
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de reportes del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DamageReport'

  /api/notifications:
    get:
      tags: [Notifications]
      summary: Ver Notificaciones (App M√≥vil)
      description: |
        Endpoint principal para app m√≥vil. Usuarios reciben:
        - Notificaciones generales (mantenimientos)
        - Notificaciones espec√≠ficas (reportes de da√±os, Airbnb, pagos)
      security:
        - bearerAuth: []
      parameters:
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Lista de notificaciones para el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

    post:
      tags: [Notifications]
      summary: Enviar Notificaci√≥n General (Admin)
      description: Administrador env√≠a notificaciones generales a residentes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, message]
              properties:
                title:
                  type: string
                  example: Aviso Importante
                message:
                  type: string
                  example: Reuni√≥n de propietarios programada para el pr√≥ximo s√°bado
                recipientType:
                  type: string
                  enum: [all, owners, tenants]
                  default: all
      responses:
        201:
          description: Notificaci√≥n enviada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Notification'

  /api/payments:
    get:
      tags: [Payments]
      summary: Listar Pagos
      description: |
        Obtener lista de pagos del usuario autenticado.
        Admins pueden ver todos los pagos.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filtrar por estado del pago
          schema:
            type: string
            enum: [pending, paid, overdue]
        - name: apartmentId
          in: query
          description: Filtrar por apartamento (solo Admin)
          schema:
            type: integer
      responses:
        200:
          description: Lista de pagos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'

    post:
      tags: [Payments]
      summary: Registrar Mensualidad (Admin)
      description: |
        **SISTEMA MENSUALIDADES:** Solo Admin puede registrar cuotas.
        Incluye servicios b√°sicos (cancha, capilla, oficina) seg√∫n documento.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apartmentId, amount, dueDate]
              properties:
                apartmentId:
                  type: integer
                  example: 1
                  description: ID del apartamento
                amount:
                  type: number
                  format: decimal
                  example: 150000
                  description: Monto de la cuota en pesos colombianos
                dueDate:
                  type: string
                  format: date
                  example: "2025-01-31"
                  description: Fecha l√≠mite de pago
                description:
                  type: string
                  example: "Cuota de administraci√≥n - Enero 2025"
                  description: Descripci√≥n del pago
      responses:
        201:
          description: Pago de administraci√≥n registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Payment'
                  message:
                    type: string
                    example: Pago de administraci√≥n registrado
        403:
          description: Solo administradores pueden registrar pagos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/payments/{id}/pay:
    put:
      tags: [Payments]
      summary: Marcar Pago como Realizado
      description: |
        Usuario marca su pago como realizado.
        Sistema actualiza estado y registra fecha de pago.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID del pago a marcar como realizado
          schema:
            type: integer
      responses:
        200:
          description: Pago marcado como realizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      status:
                        type: string
                        example: paid
                      paymentDate:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: Pago registrado como realizado

  /api/payments/overdue:
    get:
      tags: [Payments]
      summary: Verificar Pagos en Mora
      description: |
        **NOTIFICACIONES AUTOM√ÅTICAS:** Sistema verifica pagos vencidos
        y notifica autom√°ticamente a propietarios seg√∫n documento.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Pagos en mora con notificaciones autom√°ticas enviadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OverduePayment'
                  message:
                    type: string
                    example: Pagos en mora verificados. Propietarios notificados autom√°ticamente.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: ID √∫nico del usuario
        name:
          type: string
          example: Juan P√©rez
          description: Nombre completo del usuario
        email:
          type: string
          format: email
          example: juan.perez@email.com
          description: Email √∫nico del usuario
        cedula:
          type: string
          example: "12345678"
          description: N√∫mero de c√©dula
        phone:
          type: string
          example: "+57 300 123 4567"
          description: N√∫mero de tel√©fono
        role:
          type: string
          enum: [admin, owner, tenant, security]
          example: owner
          description: Rol del usuario en el sistema
        isActive:
          type: boolean
          example: true
          description: Estado activo del usuario
        createdAt:
          type: string
          format: date-time
          description: Fecha de creaci√≥n
        updatedAt:
          type: string
          format: date-time
          description: √öltima actualizaci√≥n

    Apartment:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: ID √∫nico del apartamento
        number:
          type: string
          example: "101-A"
          description: N√∫mero del apartamento
        tower:
          type: string
          example: "Torre A"
          description: Torre donde se ubica
        floor:
          type: integer
          example: 1
          description: Piso del apartamento
        type:
          type: string
          example: "2 habitaciones"
          description: Tipo de apartamento
        status:
          type: string
          enum: [owner_occupied, rented, available, maintenance]
          example: owner_occupied
          description: Estado actual del apartamento
        ownerId:
          type: integer
          example: 1
          description: ID del propietario
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Mensaje de error descriptivo"
        details:
          type: string
          example: "Informaci√≥n adicional del error"
          description: Detalles t√©cnicos (opcional)

    AirbnbGuest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentId:
          type: integer
          example: 1
        guestName:
          type: string
          example: Juan P√©rez Garc√≠a
        guestCedula:
          type: string
          example: "12345678"
        numberOfGuests:
          type: integer
          example: 2
        checkInDate:
          type: string
          format: date
          example: "2025-01-01"
        checkOutDate:
          type: string
          format: date
          example: "2025-01-07"
        status:
          type: string
          enum: [pending, checked_in, checked_out]
          example: pending
        notifications:
          type: array
          items:
            type: string
          example: ["Notificaci√≥n enviada al propietario", "Notificaci√≥n enviada al administrador"]

    ActiveGuest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentNumber:
          type: string
          example: "101-A"
        guestName:
          type: string
          example: Juan P√©rez
        guestCedula:
          type: string
          example: "12345678"
        numberOfGuests:
          type: integer
          example: 2
        status:
          type: string
          example: checked_in

    Maintenance:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Mantenimiento Piscina
        description:
          type: string
          example: Limpieza y mantenimiento general
        area:
          type: string
          example: piscina
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: pending
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: medium
        scheduledDate:
          type: string
          format: date
          example: "2025-01-15"

    DamageReport:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentId:
          type: integer
          example: 1
        title:
          type: string
          example: Fuga en ba√±o principal
        description:
          type: string
          example: Se detect√≥ fuga en la ducha
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: medium
        status:
          type: string
          enum: [reported, acknowledged, in_progress, resolved]
          example: reported
        reportedBy:
          type: integer
          example: 1

    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Nuevo hu√©sped Airbnb
        message:
          type: string
          example: Se ha registrado un hu√©sped en apartamento 101-A
        type:
          type: string
          enum: [general, maintenance, payment, airbnb_checkin, damage_report]
          example: airbnb_checkin
        isRead:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentId:
          type: integer
          example: 1
        amount:
          type: number
          format: decimal
          example: 150000
        dueDate:
          type: string
          format: date
          example: "2025-01-31"
        status:
          type: string
          enum: [pending, paid, overdue]
          example: pending
        description:
          type: string
          example: "Administraci√≥n mensual - incluye servicios b√°sicos"

    OverduePayment:
      type: object
      properties:
        apartmentId:
          type: integer
          example: 1
        apartmentNumber:
          type: string
          example: "101-A"
        amount:
          type: number
          example: 150000
        daysPastDue:
          type: integer
          example: 5
        ownerNotified:
          type: boolean
          example: true
                  notificationDate:
          type: string
          format: date-time

  /api/users:
    get:
      tags: [Users]
      summary: Listar Usuarios (Admin)
      description: |
        **SOLO ADMIN:** Obtener lista completa de usuarios del sistema.
        Incluye filtros para b√∫squeda y paginaci√≥n.
      security:
        - bearerAuth: []
      parameters:
        - name: role
          in: query
          description: Filtrar por rol de usuario
          schema:
            type: string
            enum: [admin, owner, tenant, security]
        - name: isActive
          in: query
          description: Filtrar por estado activo
          schema:
            type: boolean
      responses:
        200:
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        403:
          description: Solo administradores pueden listar usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Obtener Usuario Espec√≠fico
      description: |
        Obtener informaci√≥n de un usuario espec√≠fico.
        Admin puede ver cualquier usuario, otros solo su perfil.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Informaci√≥n del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        403:
          description: Sin permisos para ver este usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Users]
      summary: Actualizar Usuario
      description: |
        Actualizar informaci√≥n del usuario.
        Admin puede actualizar cualquier usuario, otros solo su perfil.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Juan P√©rez Actualizado"
                phone:
                  type: string
                  example: "+57 300 999 8888"
                role:
                  type: string
                  enum: [admin, owner, tenant, security]
                  description: Solo Admin puede cambiar roles
                isActive:
                  type: boolean
                  description: Solo Admin puede cambiar estado
      responses:
        200:
          description: Usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Usuario actualizado exitosamente

    delete:
      tags: [Users]
      summary: Eliminar Usuario (Admin)
      description: |
        **SOLO ADMIN:** Eliminar usuario del sistema.
        Acci√≥n irreversible, usar con precauci√≥n.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Usuario eliminado exitosamente
        403:
          description: Solo administradores pueden eliminar usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'