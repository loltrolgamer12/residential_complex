openapi: 3.0.3
info:
  title: Sistema Conjuntos Residenciales API
  description: |
    Backend API REST para sistema de gesti√≥n de conjuntos residenciales.
    
    Implementa todos los flujos especificados en el documento del proyecto universitario:
    - Registro y gesti√≥n de hu√©spedes Airbnb con notificaciones autom√°ticas
    - Programaci√≥n de mantenimientos con notificaci√≥n masiva
    - Reportes de da√±os de arrendatarios/hu√©spedes hacia propietarios
    - Sistema de mensualidades con notificaciones de mora
    - Endpoints completos para aplicaci√≥n m√≥vil
    
  version: 1.0.0
  contact:
    name: Proyecto Universitario
    email: estudiante@universidad.edu
  license:
    name: ISC
    
servers:
  - url: http://localhost:3000
    description: Servidor de desarrollo

tags:
  - name: Auth
    description: Autenticaci√≥n y autorizaci√≥n
  - name: Airbnb
    description: Gesti√≥n de hu√©spedes Airbnb (Flujo principal del documento)
  - name: Maintenance
    description: Mantenimientos programados
  - name: Damage Reports
    description: Reportes de da√±os
  - name: Notifications
    description: Sistema de notificaciones
  - name: Payments
    description: Mensualidades y pagos
  - name: System
    description: Health check y sistema

paths:
  /health:
    get:
      tags: [System]
      summary: Health Check del Sistema
      description: Endpoint para verificar estado del API y ver endpoints disponibles
      responses:
        200:
          description: Sistema funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: üè¢ Sistema Conjuntos Residenciales API
                  timestamp:
                    type: string
                    format: date-time
                  features:
                    type: object
                    description: Funcionalidades implementadas seg√∫n documento
                  endpoints:
                    type: object
                    description: Endpoints principales organizados por funcionalidad

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Iniciar Sesi√≥n
      description: Autenticar usuario en el sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: admin@residencial.com
                password:
                  type: string
                  example: admin123
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      user:
                        $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: Login exitoso

  /api/airbnb/guests:
    post:
      tags: [Airbnb]
      summary: Registrar Hu√©sped Airbnb (Flujo Principal)
      description: |
        **FLUJO PRINCIPAL DEL DOCUMENTO:**
        1. Propietario registra hu√©sped con datos completos
        2. Sistema notifica autom√°ticamente:
           - Al propietario (apartamento ocupado)
           - Al administrador (control de seguridad)
           - A porter√≠a (registro de entrada)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apartmentId, guestName, guestCedula, numberOfGuests, checkInDate, checkOutDate]
              properties:
                apartmentId:
                  type: integer
                  example: 1
                guestName:
                  type: string
                  example: Juan P√©rez Garc√≠a
                guestCedula:
                  type: string
                  example: "12345678"
                numberOfGuests:
                  type: integer
                  minimum: 1
                  maximum: 10
                  example: 2
                checkInDate:
                  type: string
                  format: date
                  example: "2025-01-01"
                checkOutDate:
                  type: string
                  format: date
                  example: "2025-01-07"
      responses:
        201:
          description: Hu√©sped registrado exitosamente con notificaciones autom√°ticas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AirbnbGuest'
                  message:
                    type: string
                    example: Hu√©sped Airbnb registrado exitosamente. Sistema notific√≥ autom√°ticamente.

  /api/airbnb/guests/{id}/checkin:
    put:
      tags: [Airbnb]
      summary: Check-in por Porter√≠a
      description: |
        **FLUJO PORTER√çA:** Vigilancia registra llegada de hu√©sped.
        Genera notificaci√≥n autom√°tica al propietario y administrador.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Check-in realizado con notificaci√≥n autom√°tica
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      status:
                        type: string
                        example: checked_in
                      timestamp:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: Check-in realizado por porter√≠a. Notificaci√≥n autom√°tica enviada.

  /api/airbnb/guests/active:
    get:
      tags: [Airbnb]
      summary: Hu√©spedes Activos (Control Seguridad)
      description: |
        **PARA ADMINISTRADOR:** Lista de hu√©spedes actualmente en el conjunto
        para control de seguridad seg√∫n documento.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de hu√©spedes activos para control de seguridad
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActiveGuest'

  /api/maintenance:
    post:
      tags: [Maintenance]
      summary: Programar Mantenimiento
      description: |
        **FLUJO MANTENIMIENTOS:** Administrador programa mantenimiento.
        Sistema notifica autom√°ticamente a TODOS los residentes.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, description, area]
              properties:
                title:
                  type: string
                  example: Mantenimiento Piscina
                description:
                  type: string
                  example: Limpieza y mantenimiento general de la piscina
                area:
                  type: string
                  enum: [parque, piscina, ascensor, zonas_comunes, gym, salon_comunal]
                  example: piscina
                scheduledDate:
                  type: string
                  format: date
                  example: "2025-01-15"
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  default: medium
      responses:
        201:
          description: Mantenimiento programado con notificaciones enviadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Maintenance'
                  message:
                    type: string
                    example: Mantenimiento programado. Todos los residentes han sido notificados.

    get:
      tags: [Maintenance]
      summary: Ver Mantenimientos (App M√≥vil)
      description: Endpoint para que usuarios vean mantenimientos en app m√≥vil
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed]
        - name: area
          in: query
          schema:
            type: string
      responses:
        200:
          description: Lista de mantenimientos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Maintenance'

  /api/damage-reports:
    post:
      tags: [Damage Reports]
      summary: Reportar Da√±o
      description: |
        **FLUJO REPORTES:** Arrendatarios/hu√©spedes reportan da√±os.
        Sistema notifica autom√°ticamente al propietario del apartamento.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apartmentId, title, description]
              properties:
                apartmentId:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: Fuga en ba√±o principal
                description:
                  type: string
                  example: Se detect√≥ una fuga de agua en la ducha del ba√±o principal
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  default: medium
      responses:
        201:
          description: Reporte creado con notificaci√≥n al propietario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DamageReport'
                  message:
                    type: string
                    example: Reporte de da√±o creado. Propietario ha sido notificado autom√°ticamente.

  /api/damage-reports/my-reports:
    get:
      tags: [Damage Reports]
      summary: Mis Reportes (App M√≥vil)
      description: Ver reportes de da√±o creados por el usuario actual
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de reportes del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DamageReport'

  /api/notifications:
    get:
      tags: [Notifications]
      summary: Ver Notificaciones (App M√≥vil)
      description: |
        Endpoint principal para app m√≥vil. Usuarios reciben:
        - Notificaciones generales (mantenimientos)
        - Notificaciones espec√≠ficas (reportes de da√±os, Airbnb, pagos)
      security:
        - bearerAuth: []
      parameters:
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Lista de notificaciones para el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

    post:
      tags: [Notifications]
      summary: Enviar Notificaci√≥n General (Admin)
      description: Administrador env√≠a notificaciones generales a residentes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, message]
              properties:
                title:
                  type: string
                  example: Aviso Importante
                message:
                  type: string
                  example: Reuni√≥n de propietarios programada para el pr√≥ximo s√°bado
                recipientType:
                  type: string
                  enum: [all, owners, tenants]
                  default: all
      responses:
        201:
          description: Notificaci√≥n enviada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Notification'

  /api/payments:
    post:
      tags: [Payments]
      summary: Registrar Mensualidad
      description: |
        **SISTEMA MENSUALIDADES:** Cada apartamento tiene pago mensual.
        Incluye servicios b√°sicos (cancha, capilla, oficina) seg√∫n documento.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [apartmentId, amount, dueDate]
              properties:
                apartmentId:
                  type: integer
                  example: 1
                amount:
                  type: number
                  format: decimal
                  example: 150000
                dueDate:
                  type: string
                  format: date
                  example: "2025-01-31"
                description:
                  type: string
                  default: "Administraci√≥n mensual - incluye servicios b√°sicos (cancha, capilla, oficina)"
      responses:
        201:
          description: Pago de administraci√≥n registrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Payment'

  /api/payments/overdue:
    get:
      tags: [Payments]
      summary: Verificar Pagos en Mora
      description: |
        **NOTIFICACIONES AUTOM√ÅTICAS:** Sistema verifica pagos vencidos
        y notifica autom√°ticamente a propietarios seg√∫n documento.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Pagos en mora con notificaciones autom√°ticas enviadas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OverduePayment'
                  message:
                    type: string
                    example: Pagos en mora verificados. Propietarios notificados autom√°ticamente.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Juan P√©rez
        email:
          type: string
          format: email
          example: juan.perez@email.com
        role:
          type: string
          enum: [admin, owner, tenant, airbnb_guest, security]
          example: owner

    AirbnbGuest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentId:
          type: integer
          example: 1
        guestName:
          type: string
          example: Juan P√©rez Garc√≠a
        guestCedula:
          type: string
          example: "12345678"
        numberOfGuests:
          type: integer
          example: 2
        checkInDate:
          type: string
          format: date
          example: "2025-01-01"
        checkOutDate:
          type: string
          format: date
          example: "2025-01-07"
        status:
          type: string
          enum: [pending, checked_in, checked_out]
          example: pending
        notifications:
          type: array
          items:
            type: string
          example: ["Notificaci√≥n enviada al propietario", "Notificaci√≥n enviada al administrador"]

    ActiveGuest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentNumber:
          type: string
          example: "101-A"
        guestName:
          type: string
          example: Juan P√©rez
        guestCedula:
          type: string
          example: "12345678"
        numberOfGuests:
          type: integer
          example: 2
        status:
          type: string
          example: checked_in

    Maintenance:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Mantenimiento Piscina
        description:
          type: string
          example: Limpieza y mantenimiento general
        area:
          type: string
          example: piscina
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: pending
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: medium
        scheduledDate:
          type: string
          format: date
          example: "2025-01-15"

    DamageReport:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentId:
          type: integer
          example: 1
        title:
          type: string
          example: Fuga en ba√±o principal
        description:
          type: string
          example: Se detect√≥ fuga en la ducha
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: medium
        status:
          type: string
          enum: [reported, acknowledged, in_progress, resolved]
          example: reported
        reportedBy:
          type: integer
          example: 1

    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Nuevo hu√©sped Airbnb
        message:
          type: string
          example: Se ha registrado un hu√©sped en apartamento 101-A
        type:
          type: string
          enum: [general, maintenance, payment, airbnb_checkin, damage_report]
          example: airbnb_checkin
        isRead:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        apartmentId:
          type: integer
          example: 1
        amount:
          type: number
          format: decimal
          example: 150000
        dueDate:
          type: string
          format: date
          example: "2025-01-31"
        status:
          type: string
          enum: [pending, paid, overdue]
          example: pending
        description:
          type: string
          example: "Administraci√≥n mensual - incluye servicios b√°sicos"

    OverduePayment:
      type: object
      properties:
        apartmentId:
          type: integer
          example: 1
        apartmentNumber:
          type: string
          example: "101-A"
        amount:
          type: number
          example: 150000
        daysPastDue:
          type: integer
          example: 5
        ownerNotified:
          type: boolean
          example: true
        notificationDate:
          type: string
          format: date-time
